class Solution {
    public int deleteAndEarn(int[] nums) {
        if (nums.length == 0) return 0; // โ ูุนุงูุฌุฉ ุงูุญุงูุฉ ุงูุฎุงุตุฉ ุฅุฐุง ูุงูุช ุงููุตูููุฉ ูุงุฑุบุฉ

        // ๐ ุฅูุฌุงุฏ ุฃูุจุฑ ุนุฏุฏ ูู ุงููุตูููุฉ ูุชุญุฏูุฏ ุญุฌู ุงููุตูููุฉ ุงููุณุงุนุฏุฉ
        int maxNum = 0;
        for (int num : nums) {
            maxNum = Math.max(maxNum, num);
        }

        // ๐ ุฅูุดุงุก ูุตูููุฉ ูุญุณุงุจ ุงูููุงุท ููู ุนุฏุฏ
        int[] points = new int[maxNum + 1];
        for (int num : nums) {
            points[num] += num; // ุฅุถุงูุฉ ูุฌููุน ุงูููุงุท ููู ุนุฏุฏ
        }

        // ๐ก ุญู ุงููุดููุฉ ุจุงุณุชุฎุฏุงู Dynamic Programming ูุซู House Robber
        int prev1 = 0, prev2 = 0; // ุชุฎุฒูู ุงูููู ุงูุณุงุจูุฉ
        for (int i = 0; i <= maxNum; i++) {
            int temp = prev1;
            prev1 = Math.max(prev1, prev2 + points[i]); // ุงุฎุชูุงุฑ ุฃูุถู ูููุฉ ุจูู ุฃุฎุฐ ุงูุนุฏุฏ ุฃู ุชุฎุทูู
            prev2 = temp;
        }

        return prev1; // โ ุฅุฑุฌุงุน ุฃูุจุฑ ุนุฏุฏ ูููู ูู ุงูููุงุท
    }
}
